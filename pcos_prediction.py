# -*- coding: utf-8 -*-
"""pcos prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XFXmdtc0hGaRQ1aFntwc4MPcV5CvEnPW
"""



!pip install pycaret

import pycaret
print(pycaret.__version__)

import pycaret
print(pycaret.__version__)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.utils import resample
from sklearn.metrics import accuracy_score, roc_auc_score
from pycaret.classification import setup, compare_models, predict_model, pull
import warnings
warnings.filterwarnings('ignore')
def load_and_preprocess(file_path):
    df = pd.read_csv(file_path)
    df = df.drop_duplicates()
    df.columns = df.columns.str.strip()
    df.rename(columns={'PCOS (Y/N)': 'PCOS', 'I   beta-HCG(mIU/mL)': 'beta_HCG_I',
                       'II    beta-HCG(mIU/mL)': 'beta_HCG_II', 'AMH(ng/mL)': 'AMH'}, inplace=True)
    df['AMH'] = pd.to_numeric(df['AMH'], errors='coerce')
    for col in ['beta_HCG_I', 'beta_HCG_II', 'AMH']:
        df[col].fillna(df[col].median(), inplace=True)
    df.drop(['Sl. No', 'Patient File No.'], axis=1, inplace=True, errors='ignore')
    return df
def feature_engineering(df):
    df['HCG_ratio'] = df['beta_HCG_I'] / (df['beta_HCG_II'] + 1e-6)
    df['HCG_diff'] = df['beta_HCG_I'] - df['beta_HCG_II']
    df['AMH_category'] = pd.cut(df['AMH'], bins=[0, 2, 7, np.inf], labels=[0,1,2])
    df['HCG_I_log'] = np.log1p(df['beta_HCG_I'])
    df['AMH_HCG_interaction'] = df['AMH'] * df['beta_HCG_I']

    features = ['beta_HCG_I', 'beta_HCG_II', 'AMH', 'HCG_ratio', 'HCG_diff',
                'AMH_category', 'HCG_I_log', 'AMH_HCG_interaction']
    X = df[features].copy()
    X['AMH_category'] = X['AMH_category'].astype(int)
    y = df['PCOS']
    return X, y
def scale_and_balance(X, y):
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    df_train = pd.DataFrame(X_train_scaled, columns=X.columns)
    df_train['PCOS'] = y_train.values
    df_majority = df_train[df_train.PCOS == 0]
    df_minority = df_train[df_train.PCOS == 1]
    df_minority_upsampled = resample(df_minority, replace=True, n_samples=len(df_majority), random_state=42)
    df_balanced = pd.concat([df_majority, df_minority_upsampled])
    X_train_balanced = df_balanced.drop('PCOS', axis=1).values
    y_train_balanced = df_balanced['PCOS'].values

def train_rf_grid(X, y):
    param_grid = {
        'n_estimators': [100, 150, 200],
        'max_depth': [None, 5, 10],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2]
    }
    grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, scoring='accuracy', n_jobs=-1)
    grid.fit(X, y)
    print("Best RF params:", grid.best_params_)
    return grid.best_estimator_
def train_xgb_grid(X, y):
    param_grid = {
        'n_estimators': [100, 150, 200],
        'max_depth': [3, 5, 7],
        'learning_rate': [0.05, 0.1],
        'subsample': [0.7, 1.0]
    }
    grid = GridSearchCV(XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42),
                        param_grid, cv=5, scoring='accuracy', n_jobs=-1)
    grid.fit(X, y)
    print("Best XGB params:", grid.best_params_)
    return grid.best_estimator_
def simple_evaluate_models(models, X_test, y_test):
    print("\nðŸ“Š Simple Model Evaluation:")
    print("=" * 40)
    for name, model in models.items():
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        accuracy = accuracy_score(y_test, y_pred)
        auc = roc_auc_score(y_test, y_pred_proba)
        print(f"{name}: Accuracy = {accuracy:.4f}, AUC = {auc:.4f}")
def pycaret_best_model(df):
    pycaret_df = df[['beta_HCG_I', 'beta_HCG_II', 'AMH', 'PCOS']].copy()
    setup(data=pycaret_df, target='PCOS', session_id=42, preprocess=True, verbose=False)
    best = compare_models()
    results = pull()[['Model', 'Accuracy', 'AUC']]
    print("\nPyCaret Model Comparison:")
    print(results)
    return best
if __name__ == "__main__":
    file_path = "PCOS_infertility.csv"
    df = load_and_preprocess(file_path)
    pycaret_model = pycaret_best_model(df)
    X, y = feature_engineering(df)
    X_train, X_test, y_train, y_test, scaler = scale_and_balance(X, y)
    rf_best = train_rf_grid(X_train, y_train)
    xgb_best = train_xgb_grid(X_train, y_train)

    models = {
        'Random Forest GridSearch': rf_best,
        'XGBoost GridSearch': xgb_best
    }
    simple_evaluate_models(models, X_test, y_test)
    pycaret_preds = predict_model(pycaret_model)
    print("\nPyCaret Best Model Predictions (first 5 rows):")
    print(pycaret_preds[['PCOS', 'prediction_label', 'prediction_score']].head())